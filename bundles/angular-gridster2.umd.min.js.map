{
  "version": 3,
  "file": "angular-gridster2.umd.min.js",
  "sources": [
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterConfig.interface.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterConfig.constant.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterUtils.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridster.interface.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterEmptyCell.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterCompact.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterRenderer.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridster.component.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterItemComponent.interface.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterScroll.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterSwap.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterPush.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterDraggable.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterPushResize.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterResizable.service.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterItem.component.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterPreview.component.ts",
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridster.module.ts"
  ],
  "sourcesContent": [
    "import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes = 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up'\n}\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n  };\n\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n",
    "import {CompactType, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false  // disable auto-position of items on conflict state\n};\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterUtils {\n\n  static merge(obj1: any, obj2: any, properties: any) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: Function, wait: number): () => void {\n    let timeout: any;\n    return function () {\n      const context = this, args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkContentClass(target: any, current: any, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n",
    "import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: Array<GridsterItemComponentInterface>;\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => Array<GridsterItemComponentInterface>;\n  checkGridCollision: (item: GridsterItem) => boolean;\n  el: any;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: Function | null;\n  emptyCellClickTouch: Function | null;\n  emptyCellContextMenu: Function | null;\n  emptyCellDrop: Function | null;\n  emptyCellDrag: Function | null;\n  emptyCellDragTouch: Function | null;\n  emptyCellMMove: Function;\n  emptyCellMMoveTouch: Function;\n  emptyCellUp: Function;\n  emptyCellUpTouch: Function;\n  emptyCellMove: Function | null;\n  emptyCellExit: Function | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.initialItem;\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: any): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      e.dataTransfer.dropEffect = 'move';\n      this.gridster.movingItem = item;\n    } else {\n      e.dataTransfer.dropEffect = 'none';\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: any): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: any): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getValidItemFromEvent(e: any, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n    const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {CompactType} from './gridsterConfig.interface';\n\n@Injectable()\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactUp();\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactLeft();\n        this.checkCompactUp();\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveUpTillCollision(item);\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveLeftTillCollision(item);\n        this.moveUpTillCollision(item);\n      }\n    }\n  }\n\n  checkCompactUp(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveUpTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.y = widget.$item.y;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveUpTillCollision(item: GridsterItem): boolean {\n    item.y -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.y += 1;\n      return false;\n    } else {\n      this.moveUpTillCollision(item);\n      return true;\n    }\n  }\n\n  checkCompactLeft(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveLeftTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveLeftTillCollision(item: GridsterItem): boolean {\n    item.x -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x += 1;\n      return false;\n    } else {\n      this.moveLeftTillCollision(item);\n      return true;\n    }\n  }\n}\n",
    "import {Injectable, Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  updateItem(el: any, item: GridsterItem, renderer: Renderer2) {\n    if (this.gridster.mobile) {\n      renderer.setStyle(el, 'transform', '');\n      renderer.setStyle(el, 'width', '');\n      renderer.setStyle(el, 'height', '');\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      const transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, 'margin-right', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      this.gridster.curColWidth = this.gridster.curRowHeight;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number) {\n    return {\n      transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number) {\n    return {\n      transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n}\n",
    "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Component({\n  selector: 'gridster',\n  template: `<div class=\"gridster-column\" *ngFor=\"let column of gridColumns; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridColumnStyle(i)\"></div>\n<div class=\"gridster-row\" *ngFor=\"let row of gridRows; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridRowStyle(i)\"></div>\n<ng-content></ng-content>\n<gridster-preview class=\"gridster-preview\"></gridster-preview>\n`,\n  styles: [`gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative;height:25%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: any;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: Array<GridsterItemComponentInterface>;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(el: ElementRef, public renderer: Renderer2, public cdRef: ChangeDetectorRef, public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  static checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    return item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    delete this.emptyCell;\n    this.compact.destroy();\n    delete this.compact;\n  }\n\n  onResize(): void {\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    let width = this.el.clientWidth;\n    let height = this.el.clientHeight;\n    if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows, columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1, widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    this.updateGrid();\n\n    if (this.$options.setGridSize) {\n      this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n      this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n    } else {\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n    this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0, colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: any, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n}\n",
    "import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  dragLimit: () => boolean | string;\n  canBeResized: () => boolean;\n  el: any;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n",
    "import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: any;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: any,\n                       calculateItemPosition: Function, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n    cancelN();\n    if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n      return;\n    }\n    intervalS = startVertical(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n    cancelS();\n    if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n      return;\n    }\n    intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY !== e.clientY) {\n    cancelVertical();\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n    cancelW();\n    if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n      return;\n    }\n    intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n    cancelE();\n    if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n      return;\n    }\n    intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX !== e.clientX) {\n    cancelHorizontal();\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY: clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX: clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = undefined;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    const gridsterItemCollision: any = this.gridster.checkCollision(pushedBy.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n      gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n      pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n      pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n      }\n    }\n  }\n}\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsTemp: Array<GridsterItemComponentInterface>;\n  private pushedItemsTempPath: Array<Array<{ x: number, y: number }>>;\n  private pushedItemsPath: Array<Array<{ x: number, y: number }>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: Array<GridsterItemComponentInterface>;\n  private tryPattern: {\n    fromEast: Array<Function>,\n    fromWest: Array<Function>,\n    fromNorth: Array<Function>,\n    fromSouth: Array<Function>,\n    [key: string]: Array<Function>\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const a: Array<GridsterItemComponentInterface> = this.gridster.findItemsWithItem(gridsterItem.$item);\n    let i = a.length - 1, itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const b: Array<GridsterItemComponentInterface> = [];\n    for (; i > -1; i--) {\n      itemCollision = a[i];\n      if (itemCollision === this.gridsterItem) {\n        makePush = false;\n        break;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const compare = this.pushedItemsTemp.find((el: GridsterItemComponentInterface) => {\n        return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n      });\n      if (compare) {\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(b[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    let dragLimit = gridsterItemCollide.dragLimit();\n\tif(dragLimit && dragLimit == \"x\") return false;\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    let dragLimit = gridsterItemCollide.dragLimit();\n\tif(dragLimit && dragLimit == \"x\") return false;\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    let dragLimit = gridsterItemCollide.dragLimit();\n\tif(dragLimit && dragLimit == \"y\") return false;\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    let dragLimit = gridsterItemCollide.dragLimit();\n\tif(dragLimit && dragLimit == \"y\") return false;\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition, x, y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n",
    "import {Injectable, NgZone} from '@angular/core';\n\nimport {GridsterSwap} from './gridsterSwap.service';\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: any) => void;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  mousemove: Function;\n  mouseup: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  mousedown: Function;\n  touchstart: Function;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean;\n  scrollIntoView: any;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n    this.scrollIntoView = this.debounce(() => {\n\t\tthis.gridsterItem.el.scrollIntoView({\n\t\t\tbehavior: \"auto\",\n\t\t\tblock: \"nearest\",\n\t\t\tinline: \"nearest\"\n\t\t});\n\t},50);\n  }\n\n  destroy(): void {\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0});\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n\tthis.scrollIntoView();\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.swap.restoreSwapItem();\n    this.push.destroy();\n    delete this.push;\n    this.swap.destroy();\n    delete this.swap;\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision !== true && this.collision !== false && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    delete this.collision;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.swap.setSwapItem();\n    this.push.destroy();\n    delete this.push;\n    this.swap.destroy();\n    delete this.swap;\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    const transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n\n    let limit = this.gridsterItem.dragLimit();\n\tlet allow = true;\n    if(limit) {\n\t\tif(limit === \"x\" && this.path[0].y !== this.gridsterItem.$item.y) allow = false;\n\t\tif(limit === \"y\" && this.path[0].x !== this.gridsterItem.$item.x) allow = false;\n\t}\n\t\n\tif(!allow) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n\t} else if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y});\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: any): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  debounce(func: any, wait: number, immediate?: boolean) {\n    let timeout: any;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      var callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n}\n",
    "import {Injectable} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Injectable()\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast: Function,\n    fromWest: Function,\n    fromNorth: Function,\n    fromSouth: Function,\n    [key: string]: Function\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: any = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number }, x, y, cols, rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n",
    "import {Injectable, NgZone} from '@angular/core';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: Array<number>;\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: Function;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  resizeEnabled: boolean;\n  mousemove: Function;\n  mouseup: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  maxHeight: number;\n  maxWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.maxHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.maxItemRows || this.gridster.$options.maxItemRows)\n      - this.margin;\n    this.maxWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.maxItemCols || this.gridster.$options.maxItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleNW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleNE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleSW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleSE;\n    }\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n    this.directionFunction(e);\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  handleN(e: any): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n\tif (this.maxHeight < this.height) {\n      this.height = this.maxHeight;\n      this.top = this.bottom - this.maxHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n\tif (this.maxWidth < this.width) {\n      this.width = this.maxWidth;\n      this.left = this.right - this.maxWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: any): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    if (this.maxHeight < this.height) {\n      this.height = this.maxHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: any): void {\n    this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n\tif (this.maxWidth < this.width) {\n      this.width = this.maxWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: any): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: any): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: any): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: any): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: any): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    const transform = 'translate(' + this.left + 'px, ' + top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemLeft(left: number): void {\n    const transform = 'translate(' + left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n",
    "import {Component, ElementRef, Host, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  template: `<ng-content></ng-content>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.s || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-s\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.e || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-e\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.n || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-n\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.w || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-w\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.se || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-se\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.ne || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-ne\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.sw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-sw\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.nw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-nw\"></div>\n`,\n  styles: [`gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: any;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2, private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit(): void {\n    this.updateOptions();\n    this.gridster.addItem(this);\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      dragEnabled: undefined,\n\t  dragLimit: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    delete this.gridster;\n    this.drag.destroy();\n    delete this.drag;\n    this.resize.destroy();\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n    this.top = top;\n    this.left = left;\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  dragLimit(): boolean | string {\n\t  if(this.$item.dragLimit === undefined) return false;\n\t  if(this.$item.dragLimit === \"x\" || this.$item.dragLimit === \"y\") return this.$item.dragLimit;\n\t  return false;\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n}\n",
    "import {Component, ElementRef, Host, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styles: [`gridster-preview{display:none;background:rgba(0,0,0,.15)}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: any;\n  gridster: GridsterComponent;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    delete this.el;\n    delete this.gridster.previewStyle;\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent],\n  providers: [],\n  bootstrap: []\n})\nexport class GridsterModule {\n}\n"
  ],
  "names": [
    "Fit",
    "ScrollVertical",
    "ScrollHorizontal",
    "Fixed",
    "VerticalFixed",
    "HorizontalFixed",
    "Always",
    "OnDragAndResize",
    "None",
    "CompactUp",
    "CompactLeft",
    "CompactUpAndLeft",
    "CompactLeftAndUp",
    "GridsterConfigService",
    "gridType",
    "GridType",
    "fixedColWidth",
    "fixedRowHeight",
    "keepFixedHeightInMobile",
    "keepFixedWidthInMobile",
    "setGridSize",
    "compactType",
    "CompactType",
    "mobileBreakpoint",
    "minCols",
    "maxCols",
    "minRows",
    "maxRows",
    "defaultItemCols",
    "defaultItemRows",
    "maxItemCols",
    "maxItemRows",
    "minItemCols",
    "minItemRows",
    "minItemArea",
    "maxItemArea",
    "margin",
    "outerMargin",
    "outerMarginTop",
    "outerMarginRight",
    "outerMarginBottom",
    "outerMarginLeft",
    "scrollSensitivity",
    "scrollSpeed",
    "initCallback",
    "undefined",
    "destroyCallback",
    "gridSizeChangedCallback",
    "itemChangeCallback",
    "itemResizeCallback",
    "itemInitCallback",
    "itemRemovedCallback",
    "itemValidateCallback",
    "enableEmptyCellClick",
    "enableEmptyCellContextMenu",
    "enableEmptyCellDrop",
    "enableEmptyCellDrag",
    "emptyCellClickCallback",
    "emptyCellContextMenuCallback",
    "emptyCellDropCallback",
    "emptyCellDragCallback",
    "emptyCellDragMaxCols",
    "emptyCellDragMaxRows",
    "ignoreMarginInRow",
    "draggable",
    "delayStart",
    "enabled",
    "ignoreContentClass",
    "ignoreContent",
    "dragHandleClass",
    "stop",
    "start",
    "dropOverItems",
    "dropOverItemsCallback",
    "resizable",
    "handles",
    "s",
    "e",
    "n",
    "w",
    "se",
    "ne",
    "sw",
    "nw",
    "swap",
    "pushItems",
    "disablePushOnDrag",
    "disablePushOnResize",
    "pushDirections",
    "north",
    "east",
    "south",
    "west",
    "pushResizeItems",
    "displayGrid",
    "DisplayGrid",
    "disableWindowResize",
    "disableWarnings",
    "scrollToNewItems",
    "disableAutoPositionOnConflict",
    "GridsterUtils",
    "merge",
    "obj1",
    "obj2",
    "properties",
    "p",
    "hasOwnProperty",
    "debounce",
    "func",
    "wait",
    "timeout",
    "context",
    "this",
    "args",
    "arguments",
    "clearTimeout",
    "setTimeout",
    "apply",
    "checkTouchEvent",
    "clientX",
    "touches",
    "length",
    "clientY",
    "changedTouches",
    "checkContentClassForEvent",
    "gridster",
    "$options",
    "checkContentClass",
    "target",
    "currentTarget",
    "checkContentClassForEmptyCellClickEvent",
    "current",
    "contentClass",
    "hasAttribute",
    "getAttribute",
    "split",
    "indexOf",
    "parentNode",
    "compareItems",
    "a",
    "b",
    "y",
    "x",
    "GridsterComponentInterface",
    "GridsterEmptyCell",
    "prototype",
    "destroy",
    "initialItem",
    "movingItem",
    "previewStyle",
    "emptyCellExit",
    "updateOptions",
    "_this",
    "emptyCellClick",
    "options",
    "renderer",
    "listen",
    "el",
    "emptyCellClickCb",
    "bind",
    "emptyCellClickTouch",
    "emptyCellContextMenu",
    "emptyCellContextMenuCb",
    "emptyCellDrop",
    "emptyCellDragDrop",
    "zone",
    "runOutsideAngular",
    "emptyCellMove",
    "emptyCellDragOver",
    "emptyCellDrag",
    "emptyCellMouseDown",
    "emptyCellDragTouch",
    "item",
    "getValidItemFromEvent",
    "cdRef",
    "markForCheck",
    "preventDefault",
    "stopPropagation",
    "dataTransfer",
    "dropEffect",
    "emptyCellMMove",
    "emptyCellMouseMove",
    "emptyCellMMoveTouch",
    "emptyCellUp",
    "emptyCellMouseUp",
    "emptyCellUpTouch",
    "oldItem",
    "rect",
    "getBoundingClientRect",
    "scrollLeft",
    "left",
    "scrollTop",
    "top",
    "pixelsToPositionX",
    "Math",
    "floor",
    "pixelsToPositionY",
    "cols",
    "rows",
    "min",
    "abs",
    "checkCollision",
    "decorators",
    "GridsterCompact",
    "checkCompact",
    "checkCompactUp",
    "checkCompactLeft",
    "checkCompactItem",
    "moveUpTillCollision",
    "moveLeftTillCollision",
    "widget",
    "widgetMovedUp",
    "l",
    "grid",
    "i",
    "$item",
    "compactEnabled",
    "itemChanged",
    "GridsterRenderer",
    "updateItem",
    "mobile",
    "setStyle",
    "round",
    "curColWidth",
    "curRowHeight",
    "width",
    "height",
    "transform",
    "marginBottom",
    "marginRight",
    "columns",
    "updateGridster",
    "addClass",
    "removeClass1",
    "removeClass2",
    "removeClass3",
    "removeClass",
    "getGridColumnStyle",
    "gridRows",
    "getGridRowStyle",
    "gridColumns",
    "GridsterComponent",
    "nativeElement",
    "JSON",
    "parse",
    "stringify",
    "calculateLayoutDebounce",
    "calculateLayout",
    "curWidth",
    "curHeight",
    "dragInProgress",
    "emptyCell",
    "compact",
    "gridRenderer",
    "checkCollisionTwoItems",
    "item2",
    "ngOnInit",
    "ngOnChanges",
    "changes",
    "setOptions",
    "api",
    "optionsChanged",
    "resize",
    "onResize",
    "getNextPossiblePosition",
    "getFirstPossiblePosition",
    "getLastPossiblePosition",
    "clientWidth",
    "clientHeight",
    "offsetWidth",
    "offsetHeight",
    "checkIfToResize",
    "windowResize",
    "widgetsIndex",
    "ngOnDestroy",
    "scrollWidth",
    "scrollHeight",
    "setGridDimensions",
    "notPlaced",
    "max",
    "marginWidth",
    "marginHeight",
    "updateGrid",
    "setSize",
    "drag",
    "toggle",
    "addItem",
    "itemComponent",
    "autoPositionItem",
    "console",
    "warn",
    "push",
    "removeItem",
    "splice",
    "collision",
    "checkGridCollision",
    "c",
    "findItemWithItem",
    "noNegativePosition",
    "maxGridCols",
    "maxGridRows",
    "inColsLimits",
    "inRowsLimits",
    "minAreaLimit",
    "maxAreaLimit",
    "area",
    "findItemsWithItem",
    "newItem",
    "startingFrom",
    "colsIndex",
    "rowsIndex",
    "canAddToRows",
    "canAddToColumns",
    "tmpItem",
    "Object",
    "assign",
    "farthestItem",
    "reduce",
    "prev",
    "curr",
    "currCoords",
    "roundingMethod",
    "noLimit",
    "position",
    "positionXToPixels",
    "positionYToPixels",
    "ctorParameters",
    "type",
    "NgZone",
    "propDecorators",
    "Input",
    "GridsterItemComponentInterface",
    "GridsterSwap",
    "gridsterItem",
    "swapedItem",
    "swapItems",
    "checkSwapBack",
    "checkSwap",
    "restoreSwapItem",
    "setSwapItem",
    "checkItemChanges",
    "pushedBy",
    "gridsterItemCollision",
    "canBeDragged",
    "gridsterItemCollide",
    "copyCollisionX",
    "copyCollisionY",
    "copyX",
    "copyY",
    "gridsterElement",
    "resizeEvent",
    "resizeEventType",
    "intervalE",
    "intervalW",
    "intervalN",
    "intervalS",
    "intervalDuration",
    "scroll",
    "lastMouse",
    "calculateItemPosition",
    "resizeEventScrollType",
    "offsetLeft",
    "offsetTop",
    "elemTopOffset",
    "elemBottomOffset",
    "cancelN",
    "startVertical",
    "cancelS",
    "cancelVertical",
    "elemRightOffset",
    "elemLeftOffset",
    "cancelW",
    "startHorizontal",
    "cancelE",
    "cancelHorizontal",
    "sign",
    "setInterval",
    "cancelScroll",
    "clearInterval",
    "GridsterPush",
    "pushedItems",
    "pushedItemsTemp",
    "pushedItemsTempPath",
    "pushedItemsPath",
    "tryPattern",
    "fromEast",
    "tryWest",
    "trySouth",
    "tryNorth",
    "tryEast",
    "fromWest",
    "fromNorth",
    "fromSouth",
    "direction",
    "disable",
    "pushedItemsOrder",
    "pushed",
    "restoreTempItems",
    "removeFromTempPushed",
    "restoreItems",
    "pushedItem",
    "setPushedItems",
    "checkPushBack",
    "change",
    "checkPushedItem",
    "itemCollision",
    "makePush",
    "find",
    "call",
    "lastIndexOf",
    "j",
    "pop",
    "removeFromPushedItem",
    "dragLimit",
    "addToTempPushed",
    "addToPushed",
    "tempPosition",
    "removeFromPushed",
    "lastPosition",
    "path",
    "GridsterDraggable",
    "scrollIntoView",
    "behavior",
    "block",
    "inline",
    "mousedown",
    "touchstart",
    "dragStart",
    "dragFunction",
    "dragMove",
    "dragStopFunction",
    "dragStop",
    "mousemove",
    "touchmove",
    "mouseup",
    "cancelOnBlur",
    "touchend",
    "touchcancel",
    "diffLeft",
    "diffTop",
    "calculateItemPositionFromMousePosition",
    "run",
    "Promise",
    "resolve",
    "then",
    "makeDrag",
    "cancelDrag",
    "positionX",
    "positionY",
    "positionXBackup",
    "positionYBackup",
    "limit",
    "allow",
    "enableDrag",
    "dragStartFunction",
    "dragStartDelay",
    "eventMove",
    "cancelTouchCancel",
    "cancelMouse",
    "immediate",
    "callNow",
    "GridsterPushResize",
    "canBeResized",
    "backUpY",
    "backUpRows",
    "backUpX",
    "backUpCols",
    "GridsterResizable",
    "itemBackup",
    "which",
    "bottom",
    "right",
    "diffRight",
    "diffBottom",
    "minHeight",
    "minWidth",
    "maxHeight",
    "maxWidth",
    "pushResize",
    "directionFunction",
    "handleN",
    "handleW",
    "handleS",
    "handleE",
    "handleNW",
    "handleNE",
    "handleSW",
    "handleSE",
    "makeResize",
    "cancelResize",
    "newPosition",
    "setItemTop",
    "setItemHeight",
    "setItemLeft",
    "setItemWidth",
    "ceil",
    "cancelTouchMove",
    "Injectable",
    "GridsterItemComponent",
    "dragEnabled",
    "resizeEnabled",
    "updateItemSize",
    "init",
    "newValue",
    "oldValue",
    "Component",
    "GridsterPreviewComponent",
    "selector",
    "template",
    "styles",
    "ElementRef",
    "GridsterModule",
    "NgModule",
    "declarations",
    "imports",
    "CommonModule"
  ],
  "mappings": "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"
}
